c. Find by key which match the regex: $ jj -i a.json -f "Hostname"
b. Create a random json: $ jj -Ru => {"unapproving":true,"neet":false,"exhale":20.03,"septum":null,"hygeist":"squareness"}
a. Create json by cli:  $ jj name=bingoo age:=100 -u    => {"age":100,"name":"bingoo"}
1. Get a string:        $ echo '{"name":{"first":"Tom","last":"Smith"}}' | jj name.last    => Smith
2. Get a block of JSON: $ echo '{"name":{"first":"Tom","last":"Smith"}}' | jj name         => {"first":"Tom","last":"Smith"}
3. Get a non-existent : $ echo '{"name":{"first":"Tom","last":"Smith"}}' | jj name.middle  => null
4. Get the raw string : $ echo '{"name":{"first":"Tom","last":"Smith"}}' | jj -r name.last => "Smith"
5. Get array value by index:
$ echo '{"friends":["Tom","Jane","Carol"]}' | jj friends.1   => Jane
$ echo '{"friends":["Tom","Jane","Carol"]}' | jj friends.-1  => Carol
$ echo '{"friends":["Tom","Jane","Carol"]}' | jj friends.-2  => Jane
$ echo '[{"name":"bingoo"},2,3]' | jj 0.name                 => bingoo
$ echo '[1,2,3]' | jj 0                                      => 1
$ echo '[1,2,3]' | jj -1                                     => 3
$ echo '[1,2,3]' | jj \#                                     => 3
6. Raw key(treat key as a single raw key without any other key path meaning)
$ echo '{"friends.-1":["Andy","Carol"]}' | jj -K friends.-1  => ["Andy", "Carol"]
7. JSON Lines lines.json file:
{"name": "Gilbert", "age": 61}
{"name": "Alexa", "age": 34}
{"name": "May", "age": 57}
8. $ jj -i lines.json  ..#       => 3
9. $ jj -i lines.json  ..1       => {"name": "Alexa", "age": 34}
10. $ jj -i lines.json  ..#.name => ["Gilbert","Alexa","May"]
11. $ jj -i lines.json  "..#[name="May"].age"=> 57
12. Update a value:  $ echo '{"name":{"first":"Tom","last":"Smith"}}' | jj -v Andy name.first => {"name":{"first":"Andy","last":"Smith"}}
13. Set a new value: $ echo '{"name":{"first":"Tom","last":"Smith"}}' | jj -v 46 age => {"age":46,"name":{"first":"Tom","last":"Smith"}}
14. Set a new nested value: $ echo '{"name":{"first":"Tom","last":"Smith"}}' | jj -v relax task.today => {"task":{"today":"relax"},"name":{"first":"Tom","last":"Smith"}}
15. Replace an array value by index: $ echo '{"friends":["Tom","Jane","Carol"]}' | jj -v Andy friends.1   => {"friends":["Tom","Andy","Carol"]}
16. Append an array: $ echo '{"friends":["Tom","Jane","Carol"]}' | jj -v Andy friends.-1  => {"friends":["Tom","Andy","Carol","Andy"]}
17. Set an array value that's past the bounds: $ echo '{"friends":["Tom","Jane","Carol"]}' | jj -v Andy friends.5   => {"friends":["Tom","Andy","Carol",null,null,"Andy"]}
18. Set a raw block of JSON: $ echo '{"name":"Carol"}' | jj -r -v '["Tom","Andy"]' friends  => {"friends":["Tom","Andy"],"name":"Carol"}
19. Start new JSON document: $ echo '' | jj -v 'Sam' name.first      => {"name":{"first":"Sam"}}
20. Delete a value: $ echo '{"age":46,"name":{"first":"Tom","last":"Smith"}}' | jj -D age   => {"name":{"first":"Tom","last":"Smith"}}
21. Delete an array value by index: $ echo '{"friends":["Andy","Carol"]}' | jj -D friends.0 => {"friends":["Carol"]}
22. Delete last item in array: $ echo '{"friends":["Andy","Carol"]}' | jj -D friends.-1     => {"friends":["Andy"]}
23. Optimistically -O update a value (when the caller expects that a value at the specified keypath already exists.)
Using this option can speed up an operation by as much as 6x, but slow down as much as 20% when the value does not exist.
$ echo '{"name":{"first":"Tom","last":"Smith"}}' | jj -v Tim -uO name.first => {"name":{"first":"Tim","last":"Smith"}}
The `-O` tells jj that the `name.first` likely exists so try a fasttrack operation first.
24. Pretty printing: $ echo '{"name":{"first":"Tom","last":"Smith"}}' | jj name
{
  "first": "Tom",
  "last": "Smith"
}
25. $ echo '{"foo": "lorem", "bar": "ipsum"}{"foo": "lorem", "bar": "ipsum"}' | jj
{
  "foo": "lorem",
  "bar": "ipsum"
}
{
  "foo": "lorem",
  "bar": "ipsum"
}
26. The `-u` flag will compress the json into the fewest characters possible by squashing newlines and spaces.
27. $ echo '{"id":"@objectId", "sex":"@random(male,female)"}' | jj -gu   => {"id":"60bcc2775555280f79cb02d2","sex":"male"}
28. $ echo '["|2", {"id":"@objectId", "sex":"@random(male,female)"}]' | jj -gu => [{"id":"60bcc26c6fbe0704ed2636cd","sex":"male"},{"id":"60bcc26c6fbe0704ed2636ce","sex":"female"}]
29. $ jj -gu x=@objectId y='@random(男,女)' z='@random_int(20-60)' z2='@random_int(0020-60)' d='@random_time(yyyy-MM-dd)' v=@random_bool e='@regex([a-z]{5}@xyz[.]cn)' f=@ksuid
{"d":"2054-02-10","e":"hpqlm@xyz.cn","f":"282aS8GZv76Tpgbqi1gibEHN5ja","v":false,"x":"625f5deb6af6dbce821573a4","y":"男","z":23,"z2":"0048"}
29. $ N=3 jj -gu a=@姓名 'b=@汉字(3)' c=@性别 d=@地址 e=@手机 f=@身份证 g=@发证机关 h=@邮箱 i=@银行卡 j=@name 'k=@file(a.txt)' l1=@ip 'l2=@ip(192.0.2.0/24)' 'l3=@ip(v6)' l4=@唐诗 l6=@宋词 l7=@诗经
{"a":"舒摋诌","b":"輕怱","c":"女","d":"贵州省遵义市陵愥路6559号闕槝小区1单元2180室","e":"13428224947","f":"824790200204033222","g":"洛阳市公安局某某分局","h":"gyafxwov@ccina.vip","i":"622960545294313799","j":"Jaycerulean"}
29. more: @random_image(format=jpg size=640x320)  @base64(size=1000 std raw file=dir/f.png)
30. $ echo '{"name":"Tom","age":18}' | jj -e 'age==18 and name=="Tom"'                       => true
31. $ echo '{"name":"Tom","age":19}' | jj -e 'age==18 and name=="Tom"'                       => false
32. $ echo '{"name":"Tom","age":19}' | jj -e 'age==18 or name=="Tom"'                        => true
33. $ echo '{"name":{"first":"Tom","age":18}}' | jj -e '"Hello:" + name.first'               => Hello:Tom
34. $ echo '{"name":{"first":"Tom","age":18}}' | jj -e 'name.first=="Tom" and name.age == 18'  => true
     more expression syntax, go https://github.com/antonmedv/expr/blob/master/docs/Language-Definition.md
35. $ echo '{"body":"{\\"_hl\\": \\"mockbin\\"}"}' | jj -pu     =>  {"body":{"_hl":"mockbin"}}
36. $ N=10 jj -R => create random json object with 10 elements.
37. $ N=10,5 jj -Ru => create 5 random json objects, each one has 10 elements.
38. $ jj -gu a='@#gofakeit({{LetterN 100}})#' => gofakeit 模版，更多模板函数，见 gofakeit 官网
39. $ jj -guJJ  a=@姓名 'b=@汉字(3)' c=@性别 d=@地址 => {a:雍鯲楙,b:斻康螈,c:男,d:河南省焦作市糆縀路3638号鮢庯小区2单元1351室}
40. $ jj -guJ  a=@姓名 'b=@汉字(3)' c=@性别 d=@地址 => {a:"步二跱",b:"鶛殃氃",c:"男",d:"河南省开封市莉耭路4920号策赵小区2单元264室"}
41. $ jj -RuJ => {currawang:["merryman"],Artinskian:"merryman",Acropora:["feodary","blockheadedness"],Leuckartiidae:false,exacerbation:false}
42. $ jj -RuJJ => {slowly:{triricinolein:{myeloma:explicatively},entracte:true},theorize:67.30,Tyrr:null,crinet:{covenantee:true},pantograph:true}
43. $ jj -gu e1='@emoji' e2='@emoji(3)' e3='@emoji(3,5) => {"e1":"🚉","e2":"🥞🏞️🚂","e3":"🦀"}
44. $ jj -gu v4=@uuid v6='@uuid(v6)' v7='@uuid(v7)' v1='@uuid(v1)' # UUID v7 - which produces time-sorted values.
45. $ jj -gu id='@tsid', idNumber='@tsid(number)' idLower='@tsid(lower)' idBytes='@tsid(bytes)' => {"id":"05M3YECWC0001,","idBytes":"AtB+czjAAAI=","idLower":"05m3yecwc0003","idNumber":202801016570118148}
46. $ N=3 jj -gu e='@seq(0,%05d)' => {"e":"00000"} {"e":"00001"} {"e":"00002"}
47. $ jj -guJ  a=@唐诗, b=@宋词 c=@诗经